\shaders

basic basic.vs basic.fs
phong_shadow basic.vs phong_shadow.fs
phong_texture_shadow basic.vs phong_shadow.fs { "USE_TEXTURE":"" }
skinning skinning.vs skinning.fs
skybox basic.vs skybox.fs 

\basic.vs 

	precision highp float;
	attribute vec3 a_vertex;
	attribute vec3 a_normal;
	attribute vec2 a_coord;

	varying vec3 v_wPosition;
	varying vec3 v_wNormal;
	varying vec2 v_coord;

	uniform mat4 u_viewprojection;
	uniform mat4 u_model;

	void main() {
		vec3 vertex = a_vertex;

		v_wPosition = (u_model * vec4(vertex,1.0)).xyz;
		v_wNormal = (u_model * vec4(a_normal,0.0)).xyz;
		v_coord = a_coord;

		gl_Position = u_viewprojection * vec4( v_wPosition, 1.0 );
		gl_PointSize = 2.0;
	}

\basic.fs 

	precision highp float;

	uniform vec4 u_color;

	void main() {
		gl_FragColor = u_color;
	}


\lighting_code

vec3 computeLight( vec3 N, vec4 material, vec3 v_wPosition, vec3 u_light_position, vec3 u_ambient_light, vec3 u_light_color )
{
	vec3 light_vector = normalize( v_wPosition - u_light_position );
	float NdotL = max( dot( N, -light_vector ), 0.0 );
	vec3 light = u_ambient_light;
	float shadow = 1.5;

	light += (shadow * 0.2) * u_light_color * NdotL;

	return light;
}

\phong_shadow.fs

	precision highp float;

	varying vec3 v_wPosition;
	varying vec3 v_wNormal;
	varying vec2 v_coord;

	uniform vec3 u_camera_position;
	uniform vec3 u_background_color;
	uniform vec3 u_ambient_light;
	uniform vec3 u_light_color;
	uniform vec3 u_light_position;

	uniform vec4 u_color;
	uniform float u_specular;
	uniform float u_glossiness;
	uniform float u_fresnel;

	#import "lighting_code"

	#ifdef USE_TEXTURE
		uniform sampler2D u_color_texture;
		uniform vec2 u_tiling;
	#endif

	void main() {

		vec3 N = normalize( v_wNormal );

		//compute material
		vec4 material = u_color;

		#ifdef USE_TEXTURE
			material *= texture2D( u_color_texture, v_coord * u_tiling );
		#endif
		
		//compute light
		vec3 computed_light = computeLight(N, material, v_wPosition, u_light_position, u_ambient_light , u_light_color);

		vec3 E = normalize(v_wPosition - u_camera_position);
		vec3 R = reflect(E,N);
		float specular_factor = u_specular * pow( abs(dot(N,R)), u_glossiness );
		float fresnel_factor = u_fresnel * pow( 1.0 - abs(dot(N,R)), 1.1 );

		//final
		vec3 final_color = material.xyz * computed_light;
		final_color += specular_factor * computed_light;

		//fresnel
		vec3 bg_color = mix( u_background_color, u_background_color * 0.5, max(0.0,-R.y) );
		final_color = mix( final_color, u_background_color, fresnel_factor );

		gl_FragColor = vec4(final_color, material.a);
	}


\skybox.fs

precision highp float;

varying vec3 v_wPosition;
varying vec3 v_wNormal;
varying vec2 v_coord;

uniform vec3 u_camera_position;
uniform samplerCube u_color_texture;


void main() {

vec3 N = normalize( v_wNormal );
vec3 V = normalize(  v_wPosition - u_camera_position );

vec4 color = textureCube( u_color_texture, V);


gl_FragColor = color;
}

\skinning_code

attribute vec4 a_bone_indices;
attribute vec4 a_weights;
uniform mat4 u_bones[64];
void computeSkinning(inout vec3 vertex, inout vec3 normal)
{
	vec4 v = vec4(vertex,1.0);
	vertex = (u_bones[int(a_bone_indices.x)] * a_weights.x * v + 
			u_bones[int(a_bone_indices.y)] * a_weights.y * v + 
			u_bones[int(a_bone_indices.z)] * a_weights.z * v + 
			u_bones[int(a_bone_indices.w)] * a_weights.w * v).xyz;
	vec4 N = vec4(normal,0.0);
	normal =	(u_bones[int(a_bone_indices.x)] * a_weights.x * N + 
			u_bones[int(a_bone_indices.y)] * a_weights.y * N + 
			u_bones[int(a_bone_indices.z)] * a_weights.z * N + 
			u_bones[int(a_bone_indices.w)] * a_weights.w * N).xyz;
	normal = normalize(normal);
}


\skinning.vs
	precision highp float;
	attribute vec3 a_vertex;
	attribute vec3 a_normal;
	attribute vec2 a_coord;
	varying vec3 v_pos;
	varying vec3 v_normal;
	varying vec2 v_coord;
	uniform mat4 u_model;
	uniform mat4 u_viewprojection;

	#import "skinning_code"
	
	void main() {
		vec3 vertex = a_vertex;
		vec3 normal = a_normal;
		computeSkinning(vertex,normal);
		v_pos = (u_model * vec4(vertex,1.0)).xyz;
		v_normal = (u_model * vec4(normal,0.0)).xyz;
		v_coord = a_coord;
		gl_Position = u_viewprojection * vec4( v_pos , 1.0 );
	}


\skinning.fs
	precision highp float;
	varying vec3 v_pos;
	varying vec3 v_normal;
	varying vec2 v_coord;
	uniform vec3 u_ambient_light;
	uniform vec3 u_light_color;
	uniform vec3 u_light_vector;
	uniform vec4 u_color;
	uniform vec3 u_light_position;
	uniform bool u_selected;

	#import "lighting_code"

	void main() {
		vec4 material = u_color;
		vec3 N = normalize(v_normal);
		vec4 aux_color = u_color;
		
		vec3 computed_light = computeLight(N, material, v_pos, u_light_position, u_ambient_light , u_light_color);

		if(u_selected)
			aux_color = vec4(1.0);

		vec3 final_color = (aux_color.xyz * computed_light);
		//gl_FragColor = vec4(final_color, material.a);
		gl_FragColor = aux_color * (vec4(u_ambient_light,1.0) + max(0.0, dot(u_light_vector,N)) * vec4(u_light_color,1.0));
		
	}
